{"version":3,"sources":["components/Space.js","components/Column.js","App.js","serviceWorker.js","index.js"],"names":["Space","props","className","style","height","size","width","backgroundColor","color","borderRadius","Column","state","id","pieces","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","setState","innerWidth","innerHeight","React","Component","App","useState","board","setBoard","currentTurn","setCurrentTurn","map","col","i","onClick","slot","indexOf","document","getElementById","setTimeout","handleClick","onMouseEnter","onMouseLeave","href","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAmBeA,EAhBD,SAACC,GACX,OACI,yBAAKC,UAAU,UACX,yBACIA,UAAU,SACVC,MAAO,CACHC,OAAQH,EAAMI,KACdC,MAAOL,EAAMI,KACbE,gBAAiBN,EAAMO,OAAS,QAChCC,aAAc,SCqCnBC,E,kDA5CX,WAAYT,GAAQ,IAAD,8BACf,cAAMA,IACDU,MAAQ,CACTL,MAAO,EACPF,OAAQ,EACRQ,GAAIX,EAAMW,GACVC,OAAQZ,EAAMY,QAElB,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBARf,E,gEAafC,KAAKF,yBACLG,OAAOC,iBAAiB,SAAUF,KAAKF,0B,6CAGvCG,OAAOE,oBAAoB,SAAUH,KAAKF,0B,+CAG1CE,KAAKI,SAAS,CAAEd,MAAOW,OAAOI,WAAYjB,OAAQa,OAAOK,gB,+BAKzD,OACI,yBACIpB,UAAU,SACVU,GAAE,aAAQI,KAAKL,MAAMC,IACrBT,MAAO,CACHG,MAAO,GAAMU,KAAKL,MAAML,MACxBF,OAAQ,GAAMY,KAAKL,MAAML,QAE7B,kBAAC,EAAD,CAAOD,KAAM,IAAOW,KAAKL,MAAML,MAAOE,MAAOQ,KAAKf,MAAMY,OAAO,KAC/D,kBAAC,EAAD,CAAOR,KAAM,IAAOW,KAAKL,MAAML,MAAOE,MAAOQ,KAAKf,MAAMY,OAAO,KAC/D,kBAAC,EAAD,CAAOR,KAAM,IAAOW,KAAKL,MAAML,MAAOE,MAAOQ,KAAKf,MAAMY,OAAO,KAC/D,kBAAC,EAAD,CAAOR,KAAM,IAAOW,KAAKL,MAAML,MAAOE,MAAOQ,KAAKf,MAAMY,OAAO,KAC/D,kBAAC,EAAD,CAAOR,KAAM,IAAOW,KAAKL,MAAML,MAAOE,MAAOQ,KAAKf,MAAMY,OAAO,KAC/D,kBAAC,EAAD,CAAOR,KAAM,IAAOW,KAAKL,MAAML,MAAOE,MAAOQ,KAAKf,MAAMY,OAAO,U,GAvC1DU,IAAMC,W,MC+EZC,MA/Ef,WAAe,MAEaC,mBACxB,CACE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,KAVF,mBAENC,EAFM,KAECC,EAFD,OAYyBF,mBAAS,OAZlC,mBAYNG,EAZM,KAYOC,EAZP,KAuDb,OACE,yBAAK5B,UAAU,OACb,6CACA,yBAAKA,UAAU,kBAEZyB,EAAMI,KAAI,SAACC,EAAKC,GACf,OACE,uBACEC,QAAS,kBAhDrB,SAAqBtB,GACnB,IAAIuB,EAAOR,EAAMf,GAAIwB,QAAQ,IACf,IAAVD,GACFE,SAASC,eAAT,aAA8B1B,IAAMV,UAAY,cAChDqC,YAAW,kBAAMF,SAASC,eAAT,aAA8B1B,IAAMV,UAAY,WAAU,KAC3E0B,GACED,EAAMf,GAAIuB,GAAQN,EACXF,IAETG,EAA8B,OAAfD,EAAuB,QAAU,SAEhDQ,SAASC,eAAT,aAA8B1B,IAAMV,UAAY,aAChDqC,YAAW,kBAAMF,SAASC,eAAT,aAA8B1B,IAAMV,UAAY,WAAU,MAoCpDsC,CAAYP,IAC3BQ,aAAc,kBAhCT7B,EAgCuBqB,OA/BtCI,SAASC,eAAT,aAA8B1B,IAC3BT,MAAMI,gBAAkB,QAF7B,IAAiBK,GAiCL8B,aAAc,kBA7BR9B,EA6BuBqB,OA5BvCI,SAASC,eAAT,aAA8B1B,IAC3BT,MAAMI,gBAAkB,QAF7B,IAAkBK,IA+BN,kBAAC,EAAD,CAAQA,GAAIqB,EAAGpB,OAAQmB,SAK/B,sCAAQH,EAAR,YACA,4BAAI,uBAAGK,QA/BX,WACEN,EAAS,CACL,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GACX,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,KAEfE,EAAe,SAqBT,UACJ,4BAAI,uBAAGa,KAAK,4CAAR,aClEUC,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFZ,SAASC,eAAe,SD2HpB,kBAAmBY,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b8946c78.chunk.js","sourcesContent":["import React from 'react';\n\n// Takes values size and color\nconst Space = (props) => {\n    return (\n        <div className=\"center\">\n            <div\n                className=\"circle\" \n                style={{\n                    height: props.size,\n                    width: props.size,\n                    backgroundColor: props.color || 'white',\n                    borderRadius: 100,\n            }}>\n            </div>\n        </div>\n    );\n};\n\nexport default Space;\n","import React from 'react';\n\nimport Space from './Space.js';\n\nclass Column extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 0,\n            height: 0,\n            id: props.id,\n            pieces: props.pieces,\n        };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n     \n    // these functions will let the board be responsive to screen size\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    } \n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    // holds 6 Space components, data passed using props\n    render() {\n        return (\n            <div \n                className=\"column\"\n                id={`col${this.state.id}`}\n                style={{\n                    width: 0.1 * this.state.width,\n                    height: 0.6 * this.state.width,\n            }}>\n                <Space size={0.09 * this.state.width} color={this.props.pieces[0]} />\n                <Space size={0.09 * this.state.width} color={this.props.pieces[1]} />\n                <Space size={0.09 * this.state.width} color={this.props.pieces[2]} />\n                <Space size={0.09 * this.state.width} color={this.props.pieces[3]} />\n                <Space size={0.09 * this.state.width} color={this.props.pieces[4]} />\n                <Space size={0.09 * this.state.width} color={this.props.pieces[5]} />\n            </div>\n        );\n    }\n}\n\nexport default Column;\n","import React, { useState } from 'react';\nimport Column from './components/Column.js';\nimport './App.css';\n\nfunction App() {\n  // all preserved state is here\n  const [board, setBoard] = useState(\n    [\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n      [0,0,0,0,0,0],\n    ]);\n  const [currentTurn, setCurrentTurn] = useState('Red');\n\n  // handles click event, checks for validity of press & gives color feedback\n  function handleClick(id) {\n    let slot = board[id].indexOf(0);\n    if (slot !== -1) {\n      document.getElementById(`col${id}`).className = \"emptyColumn\";\n      setTimeout(() => document.getElementById(`col${id}`).className = \"column\", 500);\n      setBoard((() => {\n        board[id][slot] = currentTurn; // set slot to current turn's color\n        return board;\n      })());\n      setCurrentTurn(currentTurn == 'Red' ? 'Black' : 'Red'); // change turn\n    } else {\n      document.getElementById(`col${id}`).className = \"fullColumn\";\n      setTimeout(() => document.getElementById(`col${id}`).className = \"column\", 500);\n    }\n  }\n\n  // handles changes in color when hovering over each column\n  function hoverIn(id) {\n    document.getElementById(`col${id}`)\n      .style.backgroundColor = 'blue';\n  }\n  function hoverOut(id) {\n    document.getElementById(`col${id}`)\n      .style.backgroundColor = 'grey';\n  }\n  \n  // handles reset\n  function onReset() {\n    setBoard([\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n        [0,0,0,0,0,0],\n      ]);\n    setCurrentTurn('Red');\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Connect Four!</h1>\n      <div className=\"boardContainer\">\n        {/* this maps each column of the board ARRAY to a Column component */}\n        {board.map((col, i) => {\n          return (\n            <a \n              onClick={() => handleClick(i)}\n              onMouseEnter={() => hoverIn(i)}\n              onMouseLeave={() => hoverOut(i)}\n            >\n              <Column id={i} pieces={col} />\n            </a>\n          )\n        })}\n      </div>\n      <h1>{`${currentTurn}'s turn`}</h1>\n      <h1><a onClick={onReset}>Reset</a></h1>\n      <h5><a href='https://github.com/kambielawski/connect4'>source</a></h5>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}